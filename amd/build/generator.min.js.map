{"version":3,"file":"generator.min.js","sources":["../src/generator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for course generator block.\n *\n * @module     block_dixeo_coursegen/generator\n * @author     Josemaria Bolanos <admin@mako.digital>\n * @copyright  2025 Dixeo (contact@dixeo.com)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/templates',\n    'core/notification',\n    'core/str',\n    'core/config'\n], function($, Template, Notification, Str, Config) {\n    const generatorForm = document.getElementById('edai_course_generator_form');\n    const promptContainer = generatorForm.querySelector('.prompt-container');\n    const promptForm = generatorForm.querySelector('#prompt-form');\n    const generationContainer = generatorForm.querySelector('.generation-container');\n    const courseDescription = generatorForm.querySelector('#course_description');\n    const generateCourse = generatorForm.querySelector('#generate_course');\n    const tempCourseFiles = generatorForm.querySelector('#temp_course_files');\n    const courseFiles = generatorForm.querySelector('#course_files');\n    const filesContainer = generatorForm.querySelector('#file_names');\n    const maxfilesize = 20 * 1024 * 1024; // 20 MB.\n    const maxtotalsize = 50 * 1024 * 1024; // 50 MB.\n\n    return {\n        init: function(generationURL) {\n            this.progress = 0;\n\n            this.adjustDescriptionHeight();\n            this.handleDragAndDrop();\n\n            // Trigger generation if course description is filled on page load.\n            if (courseDescription.value.trim() !== '') {\n                setTimeout(() => {\n                    generateCourse.click();\n                }, 1000);\n            }\n\n            // Add event listener to trigger generation on pressing Enter in the course description.\n            courseDescription.addEventListener('keydown', (event) => {\n                if (event.key === 'Enter' && !event.shiftKey) {\n                    event.preventDefault();\n                    generateCourse.click();\n                }\n            });\n\n            // Add event listener to generate course button.\n            generateCourse.addEventListener('click', (event) => {\n                event.preventDefault();\n\n                let courseDescriptionValue = courseDescription.value.trim();\n                courseDescription.value = '';\n\n                // Check if the course description is filled or files are uploaded.\n                if (courseDescriptionValue === '' && courseFiles.files.length === 0) {\n                    this.notify('invalidinput', 'descriptionorfilesrequired');\n                    return;\n                }\n\n                if (this.progress === 0) {\n                    this.startProgress();\n                }\n\n                const formdata = new FormData();\n                formdata.append('description', courseDescriptionValue);\n                for (let i = 0; i < courseFiles.files.length; i++) {\n                    formdata.append('course_files[]', courseFiles.files[i]);\n                }\n\n                fetch(generationURL, {\n                    method: 'POST',\n                    body: formdata\n                })\n                .then(response => {\n                    return response.json().then(data => {\n                        if (!response.ok) {\n                            this.resetProgress();\n                            throw new Error(data.error);\n                        }\n                        return data;\n                    });\n                })\n                .then(data => {\n                    const courseid = data.courseid;\n                    const coursename = data.coursename;\n                    this.finishProgress(courseid, coursename);\n                })\n                .catch(error => {\n                    this.resetProgress();\n                    const errorTitle = Str.get_string('error_title', 'block_dixeo_coursegen');\n                    Notification.alert(errorTitle, error.message);\n                });\n            });\n        },\n        adjustDescriptionHeight: function() {\n            // Adjust course description height.\n            courseDescription.addEventListener('input', function() {\n            this.style.height = 'auto'; // Reset height\n            const maxHeight = parseFloat(getComputedStyle(this).lineHeight) * 9; // 9 lines max\n            this.style.overflowY = 'hidden';\n\n            if (this.scrollHeight > maxHeight) {\n                this.style.height = maxHeight + 'px';\n                this.style.overflowY = 'scroll';\n            } else {\n                this.style.height = this.scrollHeight + 'px';\n            }\n        });\n        },\n        clearAllFiles: function() {\n            let dataTransfer = new DataTransfer();\n            courseFiles.files = dataTransfer.files;\n            this.displayFileNames();\n        },\n        transferFiles: function(newFiles) {\n            // Validate files.\n            const allowedtypes = [\n                'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n                'application/pdf',\n                'text/plain'\n            ];\n\n            let totalSize = 0;\n            let existingFiles = Array.from(courseFiles.files);\n\n            // Include the size of files already added to courseFiles.\n            for (let file of existingFiles) {\n                totalSize += file.size;\n            }\n\n            for (let file of newFiles) {\n                // Check file type.\n                if (!allowedtypes.includes(file.type)) {\n                    this.notify('uploaderror', ['filetypeinvalid', file.name]);\n                    return;\n                }\n                // Check file size.\n                totalSize += file.size;\n                if (file.size > maxfilesize) {\n                    this.notify('uploaderror', ['filetoolarge', file.name]);\n                    return;\n                }\n                // Check total size.\n                if (totalSize > maxtotalsize) {\n                    this.notify('uploaderror', 'totaltoolarge');\n                    return;\n                }\n            }\n\n            // Combine existing files with new files.\n            for (let file of newFiles) {\n                // Check if file already exists.\n                if (!existingFiles.some(existingFile => existingFile.name === file.name && existingFile.size === file.size)) {\n                    existingFiles.push(file);\n                }\n            }\n\n            // Add all files to DataTransfer\n            let dataTransfer = new DataTransfer();\n            for (let file of existingFiles) {\n                dataTransfer.items.add(file);\n            }\n\n            courseFiles.files = dataTransfer.files;\n            this.displayFileNames();\n        },\n        handleDragAndDrop: function() {\n            // Drag over and leave over prompt form.\n            let dragEnterCounter = 0;\n            $('#prompt-form').bind({\n                dragenter: function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    dragEnterCounter++;\n                    promptContainer.classList.add('drag-over');\n                },\n                dragleave: function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    dragEnterCounter--;\n                    if (dragEnterCounter === 0) {\n                        promptContainer.classList.remove('drag-over');\n                    }\n                },\n            });\n\n            // Apply drop listeners to all child elements of prompt form.\n            this.dropOnChildElements(promptForm);\n            // Move files from temp to course files.\n            tempCourseFiles.addEventListener('change', () => {\n                let newFiles = Array.from(tempCourseFiles.files);\n                this.transferFiles(newFiles);\n            });\n        },\n        dropOnChildElements: function(node) {\n            node.childNodes.forEach(child => {\n                this.dropOnChildElements(child);\n\n                child.addEventListener(\"dragover\", (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                });\n\n                child.addEventListener(\"drop\", (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    promptContainer.classList.remove('drag-over');\n\n                    if (event.dataTransfer.files.length > 0) {\n                        this.transferFiles(event.dataTransfer.files);\n                    }\n                });\n            });\n        },\n        startProgress: function() {\n            generateCourse.disabled = true;\n            promptContainer.classList.replace('d-block', 'd-none');\n            generationContainer.classList.replace('d-none', 'd-block');\n\n            let interval = setInterval(() => {\n                if (this.progress >= 90) {\n                    clearInterval(interval);\n                }\n\n                // Increase by a random amount every second\n                let increment = Math.floor(Math.random() * 5);\n                this.setProgress(this.progress + increment);\n            }, 1000);\n        },\n        finishProgress: async function(courseid, coursename) {\n            this.setProgress(100);\n            setTimeout(() => {\n                let context = {\n                    courseid: courseid,\n                    coursename: coursename,\n                    wwwroot: Config.wwwroot\n                };\n\n                Template.render('block_dixeo_coursegen/success_message', context)\n                .then((html) => {\n                    generationContainer.parentElement.insertAdjacentHTML('beforeend', html);\n                    generationContainer.classList.replace('d-block', 'd-none');\n                }).catch((error) => {\n                    Notification.exception(error);\n                });\n            }, 500);\n        },\n        resetProgress: function() {\n            generateCourse.disabled = false;\n            promptContainer.classList.replace('d-none', 'd-block');\n            generationContainer.classList.replace('d-block', 'd-none');\n\n            courseDescription.value = '';\n\n            let successContainer = generatorForm.querySelector('#success_message_container');\n            if (successContainer) {\n                successContainer.remove();\n            }\n\n            this.clearAllFiles();\n\n            this.setProgress(0);\n        },\n        setProgress: function(progress) {\n            this.progress = progress;\n\n            let progressBar = generatorForm.querySelector('.s-progress--bar');\n            if (progressBar) {\n                progressBar.style.width = `${progress}%`;\n                if (progress >= 100) {\n                    progressBar.classList.add('done');\n                } else {\n                    progressBar.classList.remove('done');\n                }\n            }\n        },\n        displayFileNames: function() {\n            let contextFiles = [];\n            let totalSize = 0;\n            for (let i = 0; i < courseFiles.files.length; i++) {\n                const file = courseFiles.files[i];\n                totalSize += file.size;\n                contextFiles.push({\n                    name: file.name,\n                    size: this.formatFilesize(file.size),\n                });\n            }\n            let hasFiles = contextFiles.length > 0;\n            let context = {\n                hasFiles: hasFiles,\n                totalSize: this.formatFilesize(totalSize),\n                maxTotalSize: this.formatFilesize(maxtotalsize),\n                files: contextFiles\n            };\n\n            Template.render('block_dixeo_coursegen/filenames', context).then((html) => {\n                filesContainer.innerHTML = html;\n\n                let deleteIcons = filesContainer.querySelectorAll('.delete-icon');\n                deleteIcons.forEach((deleteIcon, index) => {\n                    let that = this;\n                    let toDelete = courseFiles.files[index].name;\n\n                    deleteIcon.addEventListener('click', function() {\n                        // Remove file from display.\n                        let toolTipId = deleteIcon.getAttribute('aria-describedby');\n                        document.getElementById(toolTipId).remove();\n\n                        // Remove file from course files.\n                        let dataTransfer = new DataTransfer();\n                        for (let i = 0; i < courseFiles.files.length; i++) {\n                            if (courseFiles.files[i].name !== toDelete) {\n                                dataTransfer.items.add(courseFiles.files[i]);\n                            }\n                        }\n\n                        courseFiles.files = dataTransfer.files;\n                        that.displayFileNames();\n                    });\n                });\n\n            }).catch((error) => {\n                Notification.exception(error);\n            });\n        },\n        formatFilesize: (size) => {\n            const units = ['bytes', 'KB', 'MB', 'GB', 'TB'];\n            let unitIndex = 0;\n            while (size >= 1024 && unitIndex < units.length - 1) {\n                size /= 1024;\n                unitIndex++;\n            }\n            return `${size.toFixed(1)} ${units[unitIndex]}`;\n        },\n        notify: async function() {\n            let strings = [];\n            let component = 'block_dixeo_coursegen';\n\n            for (let i = 0; i < arguments.length; i++) {\n                if (Array.isArray(arguments[i])) {\n                    strings.push({\n                        key: arguments[i][0],\n                        component: component,\n                        param: arguments[i][1]\n                    });\n                } else {\n                    strings.push({\n                        key: arguments[i],\n                        component: component\n                    });\n                }\n            }\n\n            Str.get_strings(strings)\n            .done((s) => {\n                if (s.length > 1) {\n                    Notification.alert(s[0], s[1]);\n                } else {\n                    Notification.alert('', s[0]);\n                }\n            })\n            .fail(Notification.exception);\n        }\n    };\n});\n"],"names":["define","$","Template","Notification","Str","Config","generatorForm","document","getElementById","promptContainer","querySelector","promptForm","generationContainer","courseDescription","generateCourse","tempCourseFiles","courseFiles","filesContainer","init","generationURL","progress","adjustDescriptionHeight","handleDragAndDrop","value","trim","setTimeout","click","addEventListener","event","key","shiftKey","preventDefault","courseDescriptionValue","files","length","notify","this","startProgress","formdata","FormData","append","i","fetch","method","body","then","response","json","data","ok","resetProgress","Error","error","courseid","coursename","finishProgress","catch","errorTitle","get_string","alert","message","style","height","maxHeight","parseFloat","getComputedStyle","lineHeight","overflowY","scrollHeight","clearAllFiles","dataTransfer","DataTransfer","displayFileNames","transferFiles","newFiles","allowedtypes","totalSize","existingFiles","Array","from","file","size","includes","type","name","some","existingFile","push","items","add","dragEnterCounter","bind","dragenter","stopPropagation","classList","dragleave","remove","dropOnChildElements","node","childNodes","forEach","child","disabled","replace","interval","setInterval","clearInterval","increment","Math","floor","random","setProgress","async","context","wwwroot","render","html","parentElement","insertAdjacentHTML","exception","successContainer","progressBar","width","contextFiles","formatFilesize","hasFiles","maxTotalSize","innerHTML","querySelectorAll","deleteIcon","index","that","toDelete","toolTipId","getAttribute","units","unitIndex","toFixed","strings","component","arguments","isArray","param","get_strings","done","s","fail"],"mappings":"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"}