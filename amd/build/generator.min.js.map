{"version":3,"file":"generator.min.js","sources":["../src/generator.js"],"sourcesContent":["define([\n    'jquery',\n    'core/templates',\n    'core/notification',\n    'core/str'\n], function($, Template, Notification, Str) {\n    const generatorForm         = document.getElementById('edai_course_generator_form');\n    const promptContainer       = generatorForm.querySelector('.prompt-container');\n    const promptForm            = generatorForm.querySelector('#prompt-form');\n    const generationContainer   = generatorForm.querySelector('.generation-container');\n    const courseDescription     = generatorForm.querySelector('#course_description');\n    const generateCourse        = generatorForm.querySelector('#generate_course');\n    const tempCourseFiles       = generatorForm.querySelector('#temp_course_files');\n    const courseFiles           = generatorForm.querySelector('#course_files');\n    const filesContainer        = generatorForm.querySelector('#file_names');\n\n    return {\n        init: function() {\n            this.progress = 0;\n\n            this.adjustDescriptionHeight();\n            this.handleDragAndDrop();\n\n            // Trigger generation if course description is filled on page load.\n            if (courseDescription.value.trim() !== '') {\n                setTimeout(() => {\n                    generateCourse.click();\n                }, 1000);\n            }\n\n            // Add event listener to trigger generation on pressing Enter in the course description.\n            courseDescription.addEventListener('keydown', (event) => {\n                if (event.key === 'Enter' && !event.shiftKey) {\n                    event.preventDefault();\n                    generateCourse.click();\n                }\n            });\n\n            // Add event listener to generate course button.\n            generateCourse.addEventListener('click', (event) => {\n                event.preventDefault();\n\n                // Check if the course description is filled or files are uploaded.\n                if (courseDescription.value.trim() === '' && courseFiles.files.length === 0) {\n                    this.notify('invalidinput', 'descriptionorfilesrequired');\n                    return;\n                }\n\n                if (this.progress === 0) {\n                    this.startProgress();\n                }\n\n                const formdata = new FormData();\n                formdata.append('description', courseDescription.value);\n                for (let i = 0; i < courseFiles.files.length; i++) {\n                    formdata.append('course_files[]', courseFiles.files[i]);\n                }\n\n                fetch(`${M.cfg.wwwroot}/local/edai/ajax/generate_course.php`, {\n                    method: 'POST',\n                    body: formdata\n                })\n                .then(response => {\n                    return response.json().then(data => {\n                        if (!response.ok) {\n                            this.resetProgress();\n                            throw new Error(\n                                response.status === 402 ? data.error : 'Oops, error during course creation. Please try again.'\n                            );\n                        }\n                        return data;\n                    });\n                })\n                .then(data => {\n                    const courseid = data.courseid;\n                    const coursename = data.coursename;\n                    this.finishProgress(courseid, coursename);\n                })\n                .catch(error => {\n                    this.resetProgress();\n                    Notification.alert('', error.message);\n                });\n            });\n        },\n        adjustDescriptionHeight: function() {\n            // Adjust course description height.\n            courseDescription.addEventListener('input', function() {\n            this.style.height = 'auto'; // Reset height\n            const maxHeight = parseFloat(getComputedStyle(this).lineHeight) * 9; // 9 lines max\n            this.style.overflowY = 'hidden';\n\n            if (this.scrollHeight > maxHeight) {\n                this.style.height = maxHeight + 'px';\n                this.style.overflowY = 'scroll';\n            } else {\n                this.style.height = this.scrollHeight + 'px';\n            }\n        });\n        },\n        clearAllFiles: function() {\n            let dataTransfer = new DataTransfer();\n            courseFiles.files = dataTransfer.files;\n            this.displayFileNames();\n        },\n        transferFiles: function(newFiles) {\n            // Validate files.\n            const maxfilesize = 20 * 1024 * 1024;  // 20 MB\n            const maxtotalsize = 50 * 1024 * 1024; // 50 MB\n            this.maxtotalsize = maxtotalsize;\n            const allowedtypes = [\n                'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n                'application/pdf',\n                'text/plain'\n            ];\n\n            let totalSize = 0;\n            let existingFiles = Array.from(courseFiles.files);\n\n            // Include the size of files already added to courseFiles.\n            for (let file of existingFiles) {\n                totalSize += file.size;\n            }\n\n            for (let file of newFiles) {\n                // Check file type.\n                if (!allowedtypes.includes(file.type)) {\n                    this.notify('uploaderror', ['filetypeinvalid', file.name]);\n                    return;\n                }\n                // Check file size.\n                totalSize += file.size;\n                if (file.size > maxfilesize) {\n                    this.notify('uploaderror', ['filetoolarge', file.name]);\n                    return;\n                }\n                // Check total size.\n                if (totalSize > maxtotalsize) {\n                    this.notify('uploaderror', 'totaltoolarge');\n                    return;\n                }\n            }\n\n            // Combine existing files with new files.\n            for (let file of newFiles) {\n                // Check if file already exists.\n                if (!existingFiles.some(existingFile => existingFile.name === file.name && existingFile.size === file.size)) {\n                    existingFiles.push(file);\n                }\n            }\n\n            // Add all files to DataTransfer\n            let dataTransfer = new DataTransfer();\n            for (let file of existingFiles) {\n                dataTransfer.items.add(file);\n            }\n\n            courseFiles.files = dataTransfer.files;\n            this.displayFileNames();\n        },\n        handleDragAndDrop: function() {\n            // Drag over and leave over prompt form.\n            let dragEnterCounter = 0;\n            $('#prompt-form').bind({\n                dragenter: function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    dragEnterCounter++;\n                    promptContainer.classList.add('drag-over');\n                },\n                dragleave: function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    dragEnterCounter--;\n                    if (dragEnterCounter === 0) {\n                        promptContainer.classList.remove('drag-over');\n                    }\n                },\n            });\n\n            // Apply drop listeners to all child elements of prompt form.\n            this.dropOnChildElements(promptForm);\n            // Move files from temp to course files.\n            tempCourseFiles.addEventListener('change', () => {\n                let newFiles = Array.from(tempCourseFiles.files);\n                this.transferFiles(newFiles);\n            });\n        },\n        dropOnChildElements: function(node) {\n            node.childNodes.forEach(child => {\n                this.dropOnChildElements(child);\n\n                child.addEventListener(\"dragover\", (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                });\n\n                child.addEventListener(\"drop\", (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    promptContainer.classList.remove('drag-over');\n\n                    if (event.dataTransfer.files.length > 0) {\n                        this.transferFiles(event.dataTransfer.files);\n                    }\n                });\n            });\n        },\n        startProgress: function() {\n            generateCourse.disabled = true;\n            promptContainer.classList.replace('d-block', 'd-none');\n            generationContainer.classList.replace('d-none', 'd-block');\n\n            let interval = setInterval(() => {\n                if (this.progress >= 90) {\n                    clearInterval(interval);\n                }\n\n                // Increase by a random amount every second\n                let increment = Math.floor(Math.random() * 5);\n                this.setProgress(this.progress + increment);\n            }, 1000);\n        },\n        finishProgress: async function(courseid, coursename) {\n            Template.render('block_course_generator/success_message', {courseid: courseid, coursename: coursename}).then((html) => {\n                this.setProgress(100);\n                generationContainer.parentElement.insertAdjacentHTML('beforeend', html);\n                generationContainer.classList.replace('d-block', 'd-none');\n            }).catch((error) => {\n                Notification.exception(error);\n            });\n        },\n        resetProgress: function() {\n            generateCourse.disabled = false;\n            promptContainer.classList.replace('d-none', 'd-block');\n            generationContainer.classList.replace('d-block', 'd-none');\n\n            courseDescription.value = '';\n\n            let successContainer = generatorForm.querySelector('#success_message_container');\n            if (successContainer) {\n                successContainer.remove();\n            }\n\n            this.clearAllFiles();\n\n            this.setProgress(0);\n        },\n        setProgress: function(progress) {\n            this.progress = progress;\n\n            let progressBar = generatorForm.querySelector('.s-progress--bar');\n            if (progressBar) {\n                progressBar.style.width = `${progress}%`;\n                if (progress >= 100) {\n                    progressBar.classList.add('done');\n                } else {\n                    progressBar.classList.remove('done');\n                }\n            }\n        },\n        displayFileNames: function() {\n            let contextFiles = [];\n            let totalSize = 0;\n            for (let i = 0; i < courseFiles.files.length; i++) {\n                const file = courseFiles.files[i];\n                totalSize += file.size;\n                contextFiles.push({\n                    name: file.name,\n                    size: this.formatFilesize(file.size),\n                });\n            }\n            let hasFiles = contextFiles.length > 0;\n            let context = {\n                hasFiles: hasFiles,\n                totalSize: this.formatFilesize(totalSize),\n                maxTotalSize : this.formatFilesize(this.maxtotalsize),\n                files: contextFiles\n            };\n\n            Template.render('block_course_generator/filenames', context).then((html) => {\n                filesContainer.innerHTML = html;\n\n                let deleteIcons = filesContainer.querySelectorAll('.delete-icon');\n                deleteIcons.forEach((deleteIcon, index) => {\n                    let that = this;\n                    let toDelete = courseFiles.files[index].name;\n\n                    deleteIcon.addEventListener('click', function() {\n                        // Remove file from display.\n                        let toolTipId = deleteIcon.getAttribute('aria-describedby');\n                        document.getElementById(toolTipId).remove();\n\n                        // Remove file from course files.\n                        let dataTransfer = new DataTransfer();\n                        for (let i = 0; i < courseFiles.files.length; i++) {\n                            if (courseFiles.files[i].name !== toDelete) {\n                                dataTransfer.items.add(courseFiles.files[i]);\n                            }\n                        }\n\n                        courseFiles.files = dataTransfer.files;\n                        that.displayFileNames();\n                    });\n                });\n\n            }).catch((error) => {\n                Notification.exception(error);\n            });\n        },\n        formatFilesize: (size) => {\n            const units = ['bytes', 'KB', 'MB', 'GB', 'TB'];\n            let unitIndex = 0;\n            while (size >= 1024 && unitIndex < units.length - 1) {\n                size /= 1024;\n                unitIndex++;\n            }\n            return `${size.toFixed(1)} ${units[unitIndex]}`;\n        },\n        notify: async function() {\n            let strings = [];\n            let component = 'block_course_generator';\n\n            for (let i = 0; i < arguments.length; i++) {\n                if (Array.isArray(arguments[i])) {\n                    strings.push({\n                        key: arguments[i][0],\n                        component: component,\n                        param: arguments[i][1]\n                    });\n                } else {\n                    strings.push({\n                        key: arguments[i],\n                        component: component\n                    });\n                }\n            }\n\n            Str.get_strings(strings)\n            .done((s) => {\n                if (s.length > 1) {\n                    Notification.alert(s[0], s[1]);\n                } else {\n                    Notification.alert('', s[0]);\n                }\n            })\n            .fail(Notification.exception);\n        }\n    };\n});\n"],"names":["define","$","Template","Notification","Str","generatorForm","document","getElementById","promptContainer","querySelector","promptForm","generationContainer","courseDescription","generateCourse","tempCourseFiles","courseFiles","filesContainer","init","progress","adjustDescriptionHeight","handleDragAndDrop","value","trim","setTimeout","click","addEventListener","event","key","shiftKey","preventDefault","files","length","notify","this","startProgress","formdata","FormData","append","i","fetch","M","cfg","wwwroot","method","body","then","response","json","data","ok","resetProgress","Error","status","error","courseid","coursename","finishProgress","catch","alert","message","style","height","maxHeight","parseFloat","getComputedStyle","lineHeight","overflowY","scrollHeight","clearAllFiles","dataTransfer","DataTransfer","displayFileNames","transferFiles","newFiles","maxtotalsize","allowedtypes","totalSize","existingFiles","Array","from","file","size","includes","type","name","some","existingFile","push","items","add","dragEnterCounter","bind","dragenter","stopPropagation","classList","dragleave","remove","dropOnChildElements","node","childNodes","forEach","child","disabled","replace","interval","setInterval","clearInterval","increment","Math","floor","random","setProgress","async","render","html","parentElement","insertAdjacentHTML","exception","successContainer","progressBar","width","contextFiles","formatFilesize","context","hasFiles","maxTotalSize","innerHTML","querySelectorAll","deleteIcon","index","that","toDelete","toolTipId","getAttribute","units","unitIndex","toFixed","strings","component","arguments","isArray","param","get_strings","done","s","fail"],"mappings":"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"}